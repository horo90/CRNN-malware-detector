import tensorflow as tf

class LSTMCell:
    def __init__(self, n_in, n_hidden, forget_bias=1., use_peephole=False):
        self.n_hidden = n_hidden
        self.n_in = n_in
        self.forget_bias = forget_bias
        self.use_peephole = use_peephole

        with tf.variable_scope('LSTMcell', reuse=tf.AUTO_REUSE):
            self.param = {
                'W_fh' : tf.Variable(tf.random_normal([self.n_hidden, self.n_hidden], stddev=0.1)),
                'W_fx' : tf.Variable(tf.random_normal([self.n_in, self.n_hidden], stddev=0.1)),
                'W_ih' : tf.Variable(tf.random_normal([self.n_hidden, self.n_hidden], stddev=0.1)),
                'W_ix' : tf.Variable(tf.random_normal([self.n_in, self.n_hidden], stddev=0.1)),
                'W_gh' : tf.Variable(tf.random_normal([self.n_hidden, self.n_hidden], stddev=0.1)),
                'W_gx' : tf.Variable(tf.random_normal([self.n_in, self.n_hidden], stddev=0.1)),
                'W_oh' : tf.Variable(tf.random_normal([self.n_hidden, self.n_hidden], stddev=0.1)),
                'W_ox' : tf.Variable(tf.random_normal([self.n_in, self.n_hidden], stddev=0.1)),
                'b_f' : tf.Variable(tf.zeros([self.n_hidden])),
                'b_i' : tf.Variable(tf.zeros([self.n_hidden])),
                'b_g' : tf.Variable(tf.zeros([self.n_hidden])),
                'b_o' : tf.Variable(tf.zeros([self.n_hidden]))
            }

            if self.use_peephole:
                self.param.update({'W_f_diag' : tf.Variable(tf.random_normal([self.n_hidden], stddev=0.1))})
                self.param.update({'W_o_diag' : tf.Variable(tf.random_normal([self.n_hidden], stddev=0.1))})
                self.param.update({'W_i_diag' : tf.Variable(tf.random_normal([self.n_hidden], stddev=0.1))})


    def forward(self, x, h_prev, c_prev):
        # f = tf.nn.sigmoid(tf.matmul(h_prev, self.param['W_fh']) + tf.matmul(x, self.param['W_fx']) + self.param['b_f'])
        f = tf.matmul(h_prev, self.param['W_fh']) + tf.matmul(x, self.param['W_fx']) + self.param['b_f']
        # i = tf.nn.sigmoid(tf.matmul(h_prev, self.param['W_ih']) + tf.matmul(x, self.param['W_ix']) + self.param['b_i'])
        i = tf.matmul(h_prev, self.param['W_ih']) + tf.matmul(x, self.param['W_ix']) + self.param['b_i']
        g = tf.nn.tanh(tf.matmul(h_prev, self.param['W_gh']) + tf.matmul(x, self.param['W_gx']) + self.param['b_g'])
        # o = tf.nn.sigmoid(tf.matmul(h_prev, self.param['W_oh']) + tf.matmul(x, self.param['W_ox']) + self.param['b_o'])
        o = tf.matmul(h_prev, self.param['W_oh']) + tf.matmul(x, self.param['W_ox']) + self.param['b_o']

        if self.use_peephole:
            f_ = tf.nn.sigmoid(f + self.forget_bias + tf.multiply(self.param.get('W_f_diag'), c_prev))
            tmp = tf.multiply(tf.nn.sigmoid(i + tf.multiply(self.param.get('W_i_diag'), c_prev)), g)
            c = tf.multiply(f_, c_prev) + tmp
            h = tf.multiply(tf.nn.tanh(c), tf.nn.sigmoid(o + tf.multiply(self.param.get('W_o_diag'), c_prev)))
        else:
            f_ = tf.nn.sigmoid(f + self.forget_bias)
            tmp = tf.multiply(tf.nn.sigmoid(i), g)
            c = tf.multiply(f_, c_prev) + tmp
            h = tf.multiply(tf.nn.tanh(c), tf.nn.sigmoid(o))

        return h, c, tmp, f_